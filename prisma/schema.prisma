generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                 @id @default(cuid())
  name           String?
  email          String?                @unique
  emailVerified  DateTime?
  password       String
  image          String?
  role           String                 @default("user")
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  accounts       Account[]
  sessions       Session[]
  preferences    UserPreference?
  configurations NetworkConfiguration[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  theme     String   @default("light")
  language  String   @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NetworkConfiguration {
  id        String                        @id @default(cuid())
  name      String
  data      Json
  userId    String
  user      User                          @relation(fields: [userId], references: [id])
  createdAt DateTime                      @default(now())
  updatedAt DateTime                      @updatedAt
  versions  NetworkConfigurationVersion[]
}

model NetworkConfigurationVersion {
  id              String               @id @default(cuid())
  versionNumber   Int
  data            Json
  configurationId String
  configuration   NetworkConfiguration @relation(fields: [configurationId], references: [id])
  createdAt       DateTime             @default(now())
}
